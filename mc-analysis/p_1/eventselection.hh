#ifndef _EVENTSELECTION_HH_
#define _EVENTSELECTION_HH_

#include "CAnalysisModule.hh"
#include "REventWmcHeader.hh"
#include "REventHeader.hh"
#include "WTrackBank.hh"
#include "WVertexBank.hh"
#include "WHitBank.hh"
#include "WClusterBank.hh"
#include "WHitScint.hh"
#include "CCardWDET.hh"
#include <TH1F.h>
#include <TH2F.h>
#include <TH1D.h>
#include <WClusterFinder.hh>
#include <FDETClusters.hh>
#include <FDFTHTracks.hh>
#include "CDTracksSimple.hh"
#include "SECGeo.hh"
#include "SECCluster.hh"
#include "FDEdep2Ekin.hh"
#include <fstream>
#include "TCutG.h"

class eventselection : public CAnalysisModule {

public:
    eventselection();
    explicit eventselection(const char * name);
    virtual ~eventselection();

    virtual void    ProcessEvent();
    virtual void    Clear(Option_t *option = "");
    virtual void    Print(Option_t *option = "");
    virtual void    UserCommand(CCommand * command);

private:
    REventWmcHeader *fEventHeader;      //WMC Event header (contains event weight)
    REventHeader    *fHeader;           //DATA Event Header

    WTrackBank      *fFDTrackBank;      //FD Trackbank
    WTrackBank      *fCDTrackBank;      //CD Trackbank

    WTrackBank      *fMCTrackBank;      //MC Track bank (contains true MC tracks (from event generator)

    FDFTHTracks     *fFDTrackFinder;    //FD Trackfinder
    CDTracksSimple  *fCDTrackFinder;    //CD Trackfinder

    //MCTrackFinder   *fMCTrackFinder;

    //MC vertex bank. Each MC event should have one vertex,
    //which contains all emitted particles as generated by event generator
    WVertexBank     *fMCVertexBank;

    //Used to extract detector plane numbers, which are used eg in FD tracks
    CCardWDET       *fDetectorTable;

    SECGeo          *fGeometry;
    SECCluster      *fEMinCluster;

    //FDEdep2Ekin   *fFDEdep2Ekin;      //change Edep to Ekin (WasaParameters)

    //track type, particle type and FD planes new definition
    enum TrackTypes{kFDN=1,kFDC=2,kCDN=11,kCDC=12};  //FD neutral, FD charged, CD neutral, CD charged

    enum ParticleTypes{
            kDummy=0,kGamma=1,kPositron=2,kElectron=3,kPi0=7,kPiPlus=8,kPiMinus=9,
            kNeutron=13,kProton=14,kEta=17,kDeuteron=45,kTriton=46,kHe3=49,
            kDDummy=50
    };

    enum ForwardDetectorPlanes{
            kFWC1=10,kFWC2=11,kFTH1=1,kFTH2=2,kFTH3=3,
            kFRH1=4,kFRH2=5,kFRH3=6,kFRH4=7,kFRH5=8,kFVH=9
    };

    //WASA plane number for first(last) plane of these detectors
    //(take into acconunt at the beginning of the analysis program)
    Int_t   kFTH1_old, kFRH1_old, kFVH1_old, kFWC1_old, kPSfirst_old, kPSlast_old, kSEfirst_old, kSElast_old;

protected:
    void    SetupSpectra(const char * path);

    ifstream beam_file;

    Double_t p_pp_beam_lab[1000001];
    Double_t Theta_scatt_cm[1000001];

    FILE *said_file;
    FILE *BMfile;

    TGraph *gCrossSection[200];
    TGraph *gBeamMomentum;

    TH1F    *hStatistics[1];

    //Monte Carlo (generator)

    TH1F    *hp_pp_beam,*hTheta_scatt_cm;

    TH1F    *hp_beam_MC;
    TH1F    *hGenerated_Q;
    TH1F    *hGenerated_Q_wght_bilin,*hGenerated_Q_wght_prx,*hGenerated_Q_wght_lin,*hGenerated_Q_wght_sq;

    TH1F    *hEkin_p_lab_MC[2],*hp_p_lab_MC[2],*hE_p_lab_MC[2],*hTheta_p_lab_MC[2],*hPhi_p_lab_MC[2];
    TH1F    *hEkin_p_cm_MC[2],*hp_p_cm_MC[2],*hE_p_cm_MC[2],*hTheta_p_cm_MC[2],*hPhi_p_cm_MC[2];
    TH2F    *hEkin_vs_Theta_p_lab_MC[2],*hEkin_vs_Theta_p_cm_MC[2];

    TH1F    *hEkin_n_lab_MC,*hp_n_lab_MC,*hE_n_lab_MC,*hTheta_n_lab_MC,*hPhi_n_lab_MC;
    TH1F    *hEkin_n_cm_MC,*hp_n_cm_MC,*hE_n_cm_MC,*hTheta_n_cm_MC,*hPhi_n_cm_MC;
    TH2F    *hEkin_vs_Theta_n_lab_MC,*hEkin_vs_Theta_n_cm_MC;

    TH1F    *hOpeningAngle_p1_p2_lab_MC,*hOpeningAngle_p1_p2_cm_MC;

    TH2F    *hTheta_FDvsTheta_CD_lab_MC;
    TH2F    *hTheta_p1_vs_Theta_p2_lab_MC,*hTheta_p1_vs_Theta_p2_cm_MC;

    TH1F    *hDelta_Phi_lab_MC,*hDelta_Phi_cm_MC;

    TH1F    *hCrossSection_bilin,*hCrossSection_prx,*hCrossSection_lin;

    //Reconstructed
    TH1F    *hp_beam[1][1];

    TH1F    *hQ[7][10];
    TH1F    *hQ_wght_bilin[7][10],*hQ_wght_prx[7][10],*hQ_wght_lin[7][10],*hQ_wght_sq[7][10];

    TH1F    *hTracksCD[2][1],*hTracksFD[2][1];
    TH1F    *hNeutralTracksCD[2][1],*hNeutralTracksFD[2][1],*hChargedTracksCD[2][1],*hChargedTracksFD[2][1];

    TH1F    *hTime_FDC[7][10],*hTheta_FDC[7][10],*hPhi_FDC[7][10];
    TH1F    *hTime_CDC[7][10],*hTheta_CDC[7][10],*hPhi_CDC[7][10],*hMom_CDC[7][10];
    TH1F    *hTime_CDN[7][10],*hTheta_CDN[7][10],*hPhi_CDN[7][10],*hMom_CDN[7][10];

    TH2F    *hEdepFWC1vsFRH1[7][10],*hEdepFWC2vsFRH1[7][10],*hEdepFWC1vsFRH1FRH2FRH3[7][10];
    TH2F    *hEdepFTH1vsFRH1[7][10],*hEdepFRH1vsFRH2[7][10],*hEdepFRH2vsFRH3[7][10];

    TH2F    *hEdepPSBvsSEC[7][10],*hEdepPSBvsSigMom[7][10],*hEdepSECvsSigMom[7][10];

    TH2F    *hTheta_FDvsTheta_CD[7][10];

    TH1F    *hDeltaTime[7][10];

    TH1F    *hDelta_Phi[7][10],*hDelta_Phi_abs[7][10],*hDelta_Phi_sym[7][10];

    TH1D    *hDelta_Phi_sym_Q[7][10][50],*hTheta_CDC_Q[7][10][50],*hTheta_CDC_Th[7][10][20];
    TH1D    *hTheta_CDC_Q_Th[7][10][50][20];

    ClassDef(eventselection,0);

};

#endif
